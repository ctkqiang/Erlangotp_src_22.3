// -*- groovy -*-
HTTP_PROXY = "http://www-proxy.otp.ericsson.se:8080"
HTTPS_PROXY = "http://www-proxy.otp.ericsson.se:8080"
NO_PROXY = "localhost,127.0.0.1,.otp.ericsson.se,otp.ericsson.se,otp,erlang,support,nessie,wiki,monitor,jenkins"

type = "docs"
erl_flags = "+S4:4"
extra_flags = ""
ext_dir = ""
ext_dir_win = ""
test_dir = ""
test_dir_win = ""
log_dir = ""
curr_log_name = "wsl"
curr_log_cnt = 1;
motp_build_info = [:]
MOTP_HOST = "monitor.otp.ericsson.se:8999"
MOTP_PATH = "/builds"
TS_EXTRA_PLATFORM_LABEL = ""
img = ""
hostname = ""
applications = ""
refuse_tests_in_release_mode = false
sendFailEmail = false
rel = ""
timestamp = ""

pipeline {
    parameters {
	string(name: 'IMAGE_BRANCH', defaultValue: 'master-opu',
               description: 'The branch to run the test on')
	string(name: 'IMAGE_BUILD_ID', defaultValue: 'latest',
               description: 'The build id of the Windows WSL Build to test on.')
        string(name: 'APPS', defaultValue: 'all',
               description: 'Which applications to test (comma separated, i.e. "emulator,stdlib"),'+
               'defaults to all.')
        string(name: 'ERL_FLAGS', defaultValue: '', description: 'What to append to ERL_AFLAGS.')
    }
    options {
	disableConcurrentBuilds();
        timestamps();
        timeout(time: 13, unit: 'HOURS');
        buildDiscarder(logRotator(daysToKeepStr: '5'));
        skipDefaultCheckout(true)
    }

    agent none

    stages {
        // We first pack on Linux because git ssh does not work properly on windows
        stage('pack') {
            agent { label 'docker' }
            options {
                skipDefaultCheckout(false)
            }
	    steps { script {
                sendFailEmail = true
                stash name: "scripts", includes: "scripts/"
            } }
	}
        stage('setup') {
            agent { label 'WSL' }
            steps { script {

                cleanWs disableDeferredWipeout: true, deleteDirs: true

                unstash "scripts"

                /* Add an info badge with the configuration params to the build */
                params_string = "";
                params.each { key, value ->
                    params_string+="${key}=${value} "
                }
                addBadge(icon: 'info.gif', text: params_string);
	        hostname = sh_ret("hostname");

                applications = params.APPS;

                if (params.IMAGE_BUILD_ID != 'latest') {
	            lastBuildId = params.IMAGE_BUILD_ID;
	        } else {
	            otp_branch = Jenkins.instance.getItem('WindowsWSL').getItemByBranchName(params.IMAGE_BRANCH);
                    lastBuildId = getLastSuccessfullBuild(otp_branch,'QUICK',false).number;
                }
                sh "echo \"Build to copy from ${lastBuildId}\""
                copyArtifacts fingerprintArtifacts: true,
                    projectName: "WindowsWSL/${params.IMAGE_BRANCH}",
                    selector: specific("${lastBuildId}")

	        sh "tar xf otp_win64_release.tar.gz"
                rel = get_file("release/win32/releases/*/OTP_VERSION").split("\\.")[0]
                build_type = "${params.IMAGE_BRANCH}"
                commercial_marker = "c"
                timestamp = sh([script: 'date "+%Y-%m-%d_%H"', returnStdout: true]).trim()
                ext_dir = "/mnt/c/ldisk/daily_build/${rel}_${build_type}_${commercial_marker}_wsl_${BUILD_ID}.${timestamp}"
                // Create daily build dirs with logging
                sh "mkdir -p ${ext_dir}"
                log_dir = "$ext_dir/logs"
	        test_dir = "$ext_dir/test"

		// erl.exe needs windows paths
     	        ext_dir_win  = sh([script: "wslpath -m ${ext_dir}", returnStdout: true]).trim()
  	        test_dir_win = sh([script: "wslpath -m ${test_dir}", returnStdout: true]).trim()

                sh "mkdir $log_dir";
                sh "mkdir ${ext_dir}/build_info";
                sh "echo ${timestamp} > $ext_dir/build_info/timestamp"
		sh "echo ${params.IMAGE_BRANCH} > $ext_dir/build_info/branch"

                sh_log "cd ${ext_dir} && tar xf \"${WORKSPACE}/scripts/otp_src.tar.gz\""
                sh_log "mv release/win32 ${ext_dir}/otp"
                sh_log "mv release/tests ${test_dir}"
                sh_log "mv *.exe ${ext_dir}"
                sh_log "cd ${ext_dir}/otp && ./Install.exe -s"
                sh_log "${ext_dir}/otp/bin/erl.exe -noshell -s init stop"
            } }
        }
        stage('trigger daily build') {
            agent { label 'WSL' }
            steps {
                script {
		    if (applications == "all") {
			// Do not trigger when manually started to test one app
			distname64 = "otp_LXA_11930_win64_${rel}.exe"
			sh_log "echo ${rel}_${params.IMAGE_BRANCH}_c.${timestamp} > ${distname64}.name"
			sh_log "echo ${timestamp} >> ${distname64}.name"
			sh_log "echo ${params.IMAGE_BRANCH} >> ${distname64}.name"

			sh_log "scp ${ext_dir}/otp_win64_${rel}.exe " +
                            "otptest@isildur.otp.ericsson.se:/usr/local/otp/daily_build/master/dist/${distname64}"

    			distname32 = "otp_LXA_11930_win32_${rel}.exe"
			sh_log "echo ${rel}_${params.IMAGE_BRANCH}_c.${timestamp} > ${distname32}.name"
			sh_log "echo ${timestamp} >> ${distname32}.name"
			sh_log "echo ${params.IMAGE_BRANCH} >> ${distname32}.name"

			sh_log "scp ${ext_dir}/otp_win32_${rel}.exe " +
                            "otptest@isildur.otp.ericsson.se:/usr/local/otp/daily_build/master/dist/${distname32}"

			sh_log "scp *.name " +
                            "otptest@isildur.otp.ericsson.se:/usr/local/otp/daily_build/master/dist/"
		    }
                }
            }
        }
        stage('run tests') {
            agent { label 'WSL' }
            steps { script {

                sh_log("scp -r isildur:/home/otp/config-specs/ts.* ${test_dir}")

                ERLEXE = "${ext_dir}/otp/bin/erl.exe"

                motp_init();

                erlenv = "export ERL_TOP=${ext_dir}/otp_src && " +
                    "eval `${ext_dir}/otp_src/otp_build env_win32 x64` && " +
                    "export TS_EXTRA_PLATFORM_LABEL=${TS_EXTRA_PLATFORM_LABEL} && " +
                    "export ERL_AFLAGS='${erl_flags} ${params.ERL_FLAGS}' && " +
                    "export TEST_CONFIG_PATH=${test_dir_win} && " +
                    extra_flags;

                sh_log(erlenv + " export");

                erl = erlenv +
                    "cd ${test_dir}/test_server && " +
                    "${ERLEXE} -noinput ";

                sh_log(erl + " -s ts install -s init stop", "test", "ts install")

                if (applications == "all") {
                    applications = sh_ret(
                        "cd ${test_dir}/test_server && " +
                            "${ERLEXE} -noinput -eval \"[erlang:display(Test) || Test <- ts:tests()]\" -run init stop").split('[\\r\\n ]+');
                } else {
                    applications = applications.split(",");
                }

	        applications.each { app ->
                    sh_log(erl + "-env OTP_DAILY_BUILD_TOP_DIR ${ext_dir_win} " +
                           "-env USER ${user} " +
                           "-s ts run ${app.trim()} -s init stop", "test",
                           "Testing ${app.trim()}");
	        }

                // These motp info tupes are always the same for docker builds
                motp_build_info.put("emulator","64");
                motp_build_info.put("smp","true");
                motp_build_info.put("async","1");
                motp_build_info.put("kp","true");
                motp_write_build_info("${test_dir}/test_server");
                sh_log("scripts/save_test_results ${ext_dir} 2>&1","save_tests");
		save_log = get_file(get_log_name());
                sh "echo \"${save_log}\""
                def dest_dir = (save_log =~ /dest_dir: (.*)/)
                motp_build_info.put("folder",dest_dir[0][1])
	    } }
        }
    }
    post {
        success { node("WSL") { script {
	    sh_log("echo 'done'","done");
        } } }
        failure { node("WSL") { script {
	    sh_log("echo 'abort'","aborted");
        } } }
//         unsuccessful {
//             emailext subject: '${DEFAULT_SUBJECT}',
//                 body: '${SCRIPT, template="groovy-text.template"}',
//                 to: 'lukas@erlang.org',
// //                recipientProviders: [[$class: 'CulpritsRecipientProvider']],
//                 presendScript: '${DEFAULT_PRESEND_SCRIPT}'
//         }
    }
}

def motp_init() {
    def branch = params.IMAGE_BRANCH;
    // def triplet = sh_ret('$ERL_TOP/erts/autoconf/config.guess').split("-", 3);
    def rel = get_file("${ext_dir}/otp_src/OTP_VERSION").split("\\.")[0];
    def packed = timestamp.split("_")[0].replace("-","_");

    motp_build_info = ["host": hostname,
                       "release": rel,
                       "os": "windows 10",
                       "cpu": "x86_64",
                       "packed": packed,
                       "branch": branch,
                       "commercial": "true"];
    if (params.TYPE != "opt")
        motp_build_info.put("extra", params.TYPE);
    def bid = motp_post("", "init");
    motp_build_info.put("bid", bid);
    motp_post("", curr_log_name);
}

def motp_qs(status) {
    def qs = "status=${status}";
    if (status != "init")
        qs += "&log=${get_log_name()}";
    motp_build_info.each { key, val ->
        qs += "&${key}=${val}"
    }
    return qs;
}

def motp_write_build_info(dir) {
    sh_ret("echo '${motp_qs(motp_build_info["status"])}' > ${dir}/motp_build_info")
}

def motp_post(url, status, type = 'APPLICATION_FORM') {
    def qs = motp_qs(status);
    motp_url = "http://${MOTP_HOST}${MOTP_PATH}";
    if (params.SMOKE) {
        sh "echo 'POST ${qs} to ${motp_url}'";
        return "1";
    } else if (motp_build_info["bid"] == "1" && status != "wsl") {
        /* The build has not been initialized yet so we try to initialize it.
           This normally happens when monitor cannot be contacted for some
           reason. */
        motp_init();
    }
    try {
        response = httpRequest([contentType: type, httpMode: 'POST',
                                requestBody: qs, url: motp_url])
        return response.content;
    } catch (Exception ex) {
        echo "Failed to contact monitor"
        return "1";
    }
}

def get_log_name() {
    return "${log_dir}/log${sprintf("%02d", curr_log_cnt)}.${curr_log_name}";
}

def sh_ret(cmd) {
    return sh([script: cmd, returnStdout: true]).trim();
}

def sh_log(cmd, status = "", title = "") {
    if (status == "")
        status = curr_log_name;
    if (title == "")
        title = status + ": ${cmd.take(30)}";

    if (status != curr_log_name) {
        curr_log_cnt++;
        curr_log_name = status;
        motp_post("", status);
    }

    return sh([script: cmd + "| tee -a ${get_log_name()}", label: title]);
}

def get_file(filename) {
    return sh_ret("cat ${filename}");
}

def getLastSuccessfullBuild(item, param, value) {
    def currJob = item.getLastSuccessfulBuild()
    while(currJob != null) {
        def actions = currJob.actions;
        def params = actions.find{ it -> it instanceof ParametersAction}.parameters;
        def found = false;
        params.each{ it ->
            if (it.name.equals(param) && it.value.equals(value))
                found = true;
        }
        if (found)
            return currJob;

        currJob = currJob.getPreviousBuild();
        while (currJob != null && (currJob.result != Result.SUCCESS && currJob.result != Result.UNSTABLE)) {
            currJob = currJob.getPreviousBuild();
        }
    }
}
